<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://freed2003.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://freed2003.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-07T05:08:40+00:00</updated><id>https://freed2003.github.io/feed.xml</id><title type="html">blank</title><subtitle>My personal website &amp; blog! </subtitle><entry><title type="html">SECCON Quals 2024 Dual Summoners</title><link href="https://freed2003.github.io/blog/2024/dualsummoners/" rel="alternate" type="text/html" title="SECCON Quals 2024 Dual Summoners"/><published>2024-11-23T15:09:00+00:00</published><updated>2024-11-23T15:09:00+00:00</updated><id>https://freed2003.github.io/blog/2024/dualsummoners</id><content type="html" xml:base="https://freed2003.github.io/blog/2024/dualsummoners/"><![CDATA[<p>The two summoners in the name refer to two instances of AES-GCM, each with a different key. The interesting thing here is that they both use the same nonce, which is clearly an issue since the word nonce means “number only used once”. The code we are given is the following</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">import</span> <span class="n">secrets</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">signal</span>

<span class="n">signal</span><span class="p">.</span><span class="nf">alarm</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>

<span class="n">flag</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">'</span><span class="s">flag</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">SECCON{sample}</span><span class="sh">"</span><span class="p">)</span>

<span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="n">secrets</span><span class="p">.</span><span class="nf">token_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span>
<span class="n">nonce</span> <span class="o">=</span> <span class="n">secrets</span><span class="p">.</span><span class="nf">token_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">summon</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">):</span>
    <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span> <span class="o">==</span> <span class="mi">16</span>
    <span class="n">aes</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">keys</span><span class="p">[</span><span class="n">number</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">mode</span><span class="o">=</span><span class="n">AES</span><span class="p">.</span><span class="n">MODE_GCM</span><span class="p">,</span> <span class="n">nonce</span><span class="o">=</span><span class="n">nonce</span><span class="p">)</span>
    <span class="n">ct</span><span class="p">,</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">aes</span><span class="p">.</span><span class="nf">encrypt_and_digest</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">ct</span><span class="p">,</span> <span class="n">tag</span>

<span class="c1"># When you can exec dual_summon, you will win
</span><span class="k">def</span> <span class="nf">dual_summon</span><span class="p">(</span><span class="n">plaintext</span><span class="p">):</span>
    <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span> <span class="o">==</span> <span class="mi">16</span>
    <span class="n">aes1</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">mode</span><span class="o">=</span><span class="n">AES</span><span class="p">.</span><span class="n">MODE_GCM</span><span class="p">,</span> <span class="n">nonce</span><span class="o">=</span><span class="n">nonce</span><span class="p">)</span>
    <span class="n">aes2</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">keys</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">mode</span><span class="o">=</span><span class="n">AES</span><span class="p">.</span><span class="n">MODE_GCM</span><span class="p">,</span> <span class="n">nonce</span><span class="o">=</span><span class="n">nonce</span><span class="p">)</span>
    <span class="n">ct1</span><span class="p">,</span> <span class="n">tag1</span> <span class="o">=</span> <span class="n">aes1</span><span class="p">.</span><span class="nf">encrypt_and_digest</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
    <span class="n">ct2</span><span class="p">,</span> <span class="n">tag2</span> <span class="o">=</span> <span class="n">aes2</span><span class="p">.</span><span class="nf">encrypt_and_digest</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
    <span class="c1"># When using dual_summon you have to match tags
</span>    <span class="k">assert</span> <span class="n">tag1</span> <span class="o">==</span> <span class="n">tag2</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Welcome to summoning circle. Can you dual summon?</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">mode</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">[1] summon, [2] dual summon &gt;</span><span class="sh">"</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">number</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">summon number (1 or 2) &gt;</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">name</span>   <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">name of sacrifice (hex) &gt;</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">ct</span><span class="p">,</span> <span class="n">tag</span> <span class="o">=</span> <span class="nf">summon</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">monster name = [---filtered---]</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">tag(hex) = </span><span class="si">{</span><span class="n">tag</span><span class="p">.</span><span class="nf">hex</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">name</span>   <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">name of sacrifice (hex) &gt;</span><span class="sh">"</span><span class="p">))</span>
        <span class="nf">dual_summon</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Wow! you could exec dual_summon! you are master of summoner!</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>

</code></pre></div></div> <p>So we are also given an encrypt oracle, except that instead of returning the ciphertext it returns the computed tag from the AES object of our choice, either <code class="language-plaintext highlighter-rouge">aes1</code> or <code class="language-plaintext highlighter-rouge">aes2</code>. We get the flag if we can find an input such that the two ciphers return the same MAC.</p> <p>AES-GCM works in the field \(GF(2^{128})\) with polynomial \(x^{128} + x^7+x^2+x+1\), so all further expressions will be implied to be in this field. Now how do we actually find the desired input, first let’s look at how the tag is computed. Let</p> \[c = c_1|c_2|c_3|\dots |c_n\] <p>be the ciphertext where \(c_i\) refers to the ith block out of \(n\). Now let \(H = enc_k(0)\) be the encryption of the zero block using AES with the encryption key and \(s = enc_k(IV)\) be the encryption of the nonce. The tag can be computed as</p> \[t = H^{n+2}\cdot a + H^{n+1}\cdot c_1 + H^{n}\cdot c_2 +\dots H^2\cdot c_n + H\cdot L + s\] <p>where \(a\) is the authentication data and \(L\) is the encoding \(len(a)||len(c)\) with \(len(x)\) is the number of bits in \(x\) as a 64 bit unsigned integer. This may seem like a lot of terms to keep track of, but we’ll soon see that we can ignore many of these.</p> <p>First, the script uses no authentication data, so we can ignore that term. Also, the oracle actually restricts us to one block exactly, so we set \(n=1\). Our equation now becomes</p> \[t = H^2\cdot c_1 + H\cdot 128 + s\] <p>Great, we see the the tag is computed through a simple equation. The only issue is that this polynomial is based on the ciphertext, but our input is the plaintext. Fortunately, the plaintext and ciphertext in AES-GCM have a very simple relationship. We won’t go into depth for the encryption since it is not the focuse of the challenge, but essentially you encrypt a counter, which is determined by the IV, with the key and then xor the result with the plaintext. Since the IV doesn’t change, the counter’s encryption doesn’t change so we can just let it be some constant \(m\).</p> \[t = H^2\cdot c_1 + H\cdot 128 + s = H^2\cdot (p_1 + m) + H\cdot 128 + s = H^2\cdot p_1 + H^2\cdot m + H\cdot 128 + s\] <p>We can now think of this as a function in \(p_1\).</p> <p>To disambiguate between the two ciphers, we will let \(k_1\) be the key for <code class="language-plaintext highlighter-rouge">aes1</code> and \(k_2\) the key for <code class="language-plaintext highlighter-rouge">aes2</code>. We label \(H\), \(m\) and \(s\) similarly to get</p> \[t_1(p) = H_1^2\cdot p + H_1^2\cdot m_1 + H_1\cdot 128 + s_1\] \[t_2(p) = H_2^2\cdot p + H_2^2\cdot m_2 + H_2\cdot 128 + s_2\] <p>where \(p\) is the input plaintext and the RHS is what is returned as the tag. These functions simulate the oracle we are given, so let’s see how we can use them. Setting the two equal to eachother gives us</p> \[H_1^2\cdot p + H_1^2\cdot m_1 + H_1\cdot 128 + s_1 = H_2^2\cdot p + H_2^2\cdot m_2 + H_2\cdot 128 + s_2\] \[H_1^2\cdot p - H_2^2\cdot p = H_2^2\cdot m_2 + H_2\cdot 128 + s_2 - H_1^2\cdot m_1 + H_1\cdot 128 + s_1\] \[p = \frac{H_2^2\cdot m_2 + H_2\cdot 128 + s_2 - H_1^2\cdot m_1 + H_1\cdot 128 + s_1}{H_1^2- H_2^2}\] <p>We now have an expression for our desired input. We have</p> \[t_1(0) = H_1^2\cdot m_1 + H_1\cdot 128 + s_1\] \[t_1(1) = H_1^2 + H_1^2\cdot m_1 + H_1\cdot 128 + s_1\] <p>So we can add these two to get \(H_1^2\) (remember addition and subtraction are the same in a field with characteristic \(2\)). We repeat the processes to get \(H_2^2\). We substitute these equations into our expression for \(p\) to get</p> \[p = \frac{t_2(0) + t_1(0)}{H_1^2 - H_2^2}\] <p>Since we have all the terms on the right hand side, we can easily compute \(p\). We can now just submit it and we get the flag <code class="language-plaintext highlighter-rouge">SECCON{Congratulation!_you are_master_of_summonor!_you_can_summon_2_monsters_in_one_turn}</code>. The solve script follows</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="k">def</span> <span class="nf">flip</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
   <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="nf">bin</span><span class="p">(</span><span class="n">a</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">128</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">gf2_128_mult</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">assert</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">128</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">128</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">127</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">^=</span> <span class="n">x</span> <span class="o">*</span> <span class="p">((</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1"># branchless
</span>        <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mh">0xE1000000000000000000000000000000</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">res</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">128</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="k">def</span> <span class="nf">gf_degree</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="p">:</span>
  <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">a</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>
  <span class="nf">while </span><span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">:</span>
    <span class="n">a</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">res</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">res</span>

<span class="k">def</span> <span class="nf">gf_invert</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">mod</span><span class="o">=</span><span class="mi">340282366920938463463374607431768211591</span><span class="p">)</span> <span class="p">:</span>
  <span class="n">v</span> <span class="o">=</span> <span class="n">mod</span>
  <span class="n">g1</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">g2</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">j</span> <span class="o">=</span> <span class="nf">gf_degree</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">-</span> <span class="mi">128</span>

  <span class="nf">while </span><span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">:</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">:</span>
      <span class="n">a</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">v</span><span class="p">,</span> <span class="n">a</span>
      <span class="n">g1</span><span class="p">,</span> <span class="n">g2</span> <span class="o">=</span> <span class="n">g2</span><span class="p">,</span> <span class="n">g1</span>
      <span class="n">j</span> <span class="o">=</span> <span class="o">-</span><span class="n">j</span>

    <span class="n">a</span> <span class="o">^=</span> <span class="n">v</span> <span class="o">&lt;&lt;</span> <span class="n">j</span>
    <span class="n">g1</span> <span class="o">^=</span> <span class="n">g2</span> <span class="o">&lt;&lt;</span> <span class="n">j</span>

    <span class="n">a</span> <span class="o">%=</span> <span class="mi">2</span><span class="o">**</span><span class="mi">128</span>  <span class="c1"># Emulating 8-bit overflow
</span>    <span class="n">g1</span> <span class="o">%=</span> <span class="mi">2</span><span class="o">**</span><span class="mi">128</span> <span class="c1"># Emulating 8-bit overflow
</span>
    <span class="n">j</span> <span class="o">=</span> <span class="nf">gf_degree</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">-</span> <span class="nf">gf_degree</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">g1</span>
<span class="k">def</span> <span class="nf">get_inverse</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
   <span class="n">f</span> <span class="o">=</span> <span class="nf">flip</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
   <span class="n">inv</span> <span class="o">=</span> <span class="nf">gf_invert</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
   <span class="n">back</span> <span class="o">=</span> <span class="nf">flip</span><span class="p">(</span><span class="n">inv</span><span class="p">)</span>
   <span class="k">return</span> <span class="n">back</span>
<span class="n">aid</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="o">*</span><span class="mi">32</span>
<span class="n">mid</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">80</span><span class="sh">"</span><span class="o">+</span><span class="sa">b</span><span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="o">*</span><span class="mi">30</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">gf2_128_mult</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">127</span><span class="p">))</span>
<span class="n">conn</span> <span class="o">=</span> <span class="nf">remote</span><span class="p">(</span><span class="sh">"</span><span class="s">dual-summon.seccon.games</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2222</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">())</span>

<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">aid</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">tag1</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s"> = </span><span class="sh">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tag1</span><span class="p">)</span>


<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">tag2</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s"> = </span><span class="sh">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tag2</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">aid</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">tag3</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s"> = </span><span class="sh">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tag3</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">tag4</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">decode</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s"> = </span><span class="sh">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">tag4</span><span class="p">)</span>

<span class="n">H12</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">tag2</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">^</span> <span class="nf">int</span><span class="p">(</span><span class="n">tag1</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>

<span class="n">H22</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">tag4</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">^</span> <span class="nf">int</span><span class="p">(</span><span class="n">tag3</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>

<span class="n">target</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">tag1</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span> <span class="o">^</span> <span class="nf">int</span><span class="p">(</span><span class="n">tag3</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>

<span class="n">inv</span> <span class="o">=</span> <span class="nf">get_inverse</span><span class="p">(</span><span class="n">H12</span> <span class="o">^</span> <span class="n">H22</span><span class="p">)</span>

<span class="n">ta</span> <span class="o">=</span> <span class="nf">gf2_128_mult</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">inv</span><span class="p">)</span>
<span class="n">ans</span> <span class="o">=</span> <span class="nf">hex</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="nf">bin</span><span class="p">(</span><span class="n">ta</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">128</span><span class="p">),</span><span class="mi">2</span><span class="p">))[</span><span class="mi">2</span><span class="p">:]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nf">encode</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">conn</span><span class="p">.</span><span class="nf">recvline</span><span class="p">())</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="ctf-writeups"/><category term="crypto"/><summary type="html"><![CDATA[Nonce means only used once]]></summary></entry><entry><title type="html">Buckeye 2023 Quadprime Prime</title><link href="https://freed2003.github.io/blog/2024/quadprime/" rel="alternate" type="text/html" title="Buckeye 2023 Quadprime Prime"/><published>2024-03-01T15:09:00+00:00</published><updated>2024-03-01T15:09:00+00:00</updated><id>https://freed2003.github.io/blog/2024/quadprime</id><content type="html" xml:base="https://freed2003.github.io/blog/2024/quadprime/"><![CDATA[<p>A sequal to the problem “twin prime” which attempts to make the implementation more secure, but any implementation with related primes will not be secure as we will soon find out.</p> <p>The code given to us in this problem is as follows</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">Crypto.Util.number</span> <span class="k">as</span> <span class="n">cun</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">cun</span><span class="p">.</span><span class="nf">getPrime</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">cun</span><span class="p">.</span><span class="nf">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">q</span> <span class="o">+</span> <span class="mi">2</span>
    <span class="k">if</span> <span class="n">cun</span><span class="p">.</span><span class="nf">isPrime</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>
        <span class="k">break</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">cun</span><span class="p">.</span><span class="nf">getPrime</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>

<span class="n">n_1</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="n">n_2</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="n">s</span>

<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>
<span class="n">d_1</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">d_2</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>

<span class="n">FLAG</span> <span class="o">=</span> <span class="n">cun</span><span class="p">.</span><span class="nf">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">buckeye{??????????????????????????????????????????????????????????????????????}</span><span class="sh">"</span><span class="p">)</span>
<span class="n">c_1</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">FLAG</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n_1</span><span class="p">)</span>
<span class="n">c_2</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">FLAG</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n_2</span><span class="p">)</span>

<span class="k">assert</span> <span class="nf">pow</span><span class="p">(</span><span class="n">c_1</span><span class="p">,</span> <span class="n">d_1</span><span class="p">,</span> <span class="n">n_1</span><span class="p">)</span> <span class="o">==</span> <span class="n">FLAG</span>
<span class="k">assert</span> <span class="nf">pow</span><span class="p">(</span><span class="n">c_2</span><span class="p">,</span> <span class="n">d_2</span><span class="p">,</span> <span class="n">n_2</span><span class="p">)</span> <span class="o">==</span> <span class="n">FLAG</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">n_1 = </span><span class="si">{</span><span class="n">n_1</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">n_2 = </span><span class="si">{</span><span class="n">n_2</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">c_1 = </span><span class="si">{</span><span class="n">c_1</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">c_2 = </span><span class="si">{</span><span class="n">c_2</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="sh">"""</span><span class="s">
Output:
n_1 = 266809852588733960459210318535250490646048889879697803536547660295087424359820779393976863451605416209176605481092531427192244973818234584061601217275078124718647321303964372896579957241113145579972808278278954608305998030194591242728217565848616966569801983277471847623203839020048073235167290935033271661610383018423844098359553953309688771947405287750041234094613661142637202385185625562764531598181575409886288022595766239130646497218870729009410265665829
n_2 = 162770846172885672505993228924251587431051775841565579480252122266243384175644690129464185536426728823192871786769211412433986353757591946187394062238803937937524976383127543836820456373694506989663214797187169128841031021336535634504223477214378608536361140638630991101913240067113567904312920613401666068950970122803021942481265722772361891864873983041773234556100403992691699285653231918785862716655788924038111988473048448673976046224094362806858968008487
c_1 = 90243321527163164575722946503445690135626837887766380005026598963525611082629588259043528354383070032618085575636289795060005774441837004810039660583249401985643699988528916121171012387628009911281488352017086413266142218347595202655520785983898726521147649511514605526530453492704620682385035589372309167596680748613367540630010472990992841612002290955856795391675078590923226942740904916328445733366136324856838559878439853270981280663438572276140821766675
c_2 = 111865944388540159344684580970835443272640009631057414995719169861041593608923140554694111747472197286678983843168454212069104647887527000991524146682409315180715780457557700493081056739716146976966937495267984697028049475057119331806957301969226229338060723647914756122358633650004303172354762801649731430086958723739208772319851985827240696923727433786288252812973287292760047908273858438900952295134716468135711755633215412069818249559715918812691433192840
</span><span class="sh">"""</span>
</code></pre></div></div> <p>It’s very reminescent of the twin prime problem, but in this case we aren’t actually using the twin primes together but rather splitting them up into two different moduli by generating two more random primes. If we were just given one of these moduli we’d probably be out of luck. But we have both, which means we do have the twin primes available to us, just in some obfuscated form. Let’s see how we can use them.</p> <p>The two moduli we are given are</p> <p>\(n_1 = p \cdot q\) and \(n_2 = r\cdot s = (q + 2)\cdot s\)</p> <p>But \(q\) is massive compared to \(2\) and contains almost twice as many bits as \(s\), so in reality we kinda have</p> \[n_2 = (q+2)\cdot s = qs + 2s \approx qs\] <p>If we had $qs$ exactly then we could take the gcd with $n_1$ to recover $q$, and then we’d be done. But we don’t, and there isn’t really a thing such as approximate gcd with a close value. Instead, we can find a way to cancel out this “common factor” by dividing the two moduli.</p> \[\frac{n_1}{n_2} = \frac{pq}{(q+2)s} = \frac{q}{q+2}\cdot\frac{p}{s} \approx \frac{p}{s}\] <p>with how much bigger $q$ is compared to $2$ (which, considering $q$ is $1024$ bits would be around \(2^{1022}\) times bigger) this is actually a very approximation. We can actually calculate the error to see how small it is</p> \[error = \frac{q}{q} - \frac{q}{q+2} = \frac{2}{q+2} &lt; \frac{2}{2^{1023}} = \frac{1}{2^{1022}}\] <p>with the inequality coming from the fact that \(q\) is a \(1024\) bit prime, and considering \(2^{1023}\) isn’t prime it would be some number bigger. \(\frac{1}{2^{1022}}\) is already a very small number, probably small enough to not cause us any problems.</p> <p>Ok, now we have a very good approximation of \(\frac{p}{s}\), but we have it in decimal form. How can we actually retrieve \(p\) and \(s\)?</p> <p>If you know about continued fractions feel free to skip this part (or read anyway to give my work some validation). Otherwise, let’s start off with a simpler example. Given the decimal \(1.6\), how can we recover a fractional form? Well, we know that our number is equal to \(1 + some fraction\), so we can extract \(1\) and we are left with \(1 + .6\) and our problem reduces to finding a fraction for \(.6\). You may be tempted to just write it as \(\frac{6}{10}\) and call it a day, and you would be right in this case, but this won’t work in our original problem as we only have a close approximation and not the exact value. This also won’t work if our number was irrational!</p> <p>So want do we do? Since we truncated a the integer part of our number, we are left with a value less than \(1\), and thus can be written in the form \(\frac{1}{a}\) for some value \(a &gt; 1\). We work to find this \(a\) by taking the recipricol of \(.6\), and doing so gives us \(.6 = \frac{1}{1.\overline{6}}\) and our (in progress) expression looks like</p> \[1.6 = 1 + \frac{1}{1.\overline{6}}\] <p>Now we can run the same process on \(1.\overline{6}\) to find an approximation for it. This iteration leaves us with</p> \[1.6 = 1 + \frac{1}{1+\overline{.6}} = 1 + \frac{1}{1+\frac{1}{1.5}}\] <p>The end is near. Performing another iteration gives us</p> \[1.6 = 1 + \frac{1}{1+\overline{.6}} = 1 + \frac{1}{1+\frac{1}{1.5}} = 1 + \frac{1}{1+\frac{1}{1 + .5}} = 1 + \frac{1}{1+\frac{1}{1 + \frac{1}{2}}}\] <p>our process terminates because the recipricol of \(.5\) has no fractional part (it’s just \(2\)) so there’s no reason to keep going. Now we’re done, and we can get our fractional expression by collapsing from the bottom up</p> \[1.6 = 1 + \frac{1}{1+\frac{1}{1 + \frac{1}{2}}} = 1 + \frac{1}{1+\frac{1}{\frac{3}{2}}} = 1 + \frac{1}{1+\frac{2}{3}} = 1 + \frac{1}{\frac{5}{3}} = \frac{8}{5}\] <p>and we’re done. We now have a good algorithm for finding a fractional expression: split apart the integer part, take the recipricol of the remainder, repeat.</p> <p>The real power of this method known as “continued fractions” comes from it’s ability to give fractional <em>approximations</em>. Pretend that we gave up after the first iteration. Our fraction would just be \(1.6 = 1 + \frac{1}{1 + some number}\)</p> <p>We don’t really know how to express “some number”, nor do we really care. So we discard it and get the expression \(1 + \frac{1}{1} = \frac{2}{1} = 2\)</p> <p>We didn’t exactly get our number (which is expected considering we gave up, only hard work can get results) but we did get something <em>kindaa</em> close, which is a subjective but our result could’ve been something like \(3\) instead, which is much further off.</p> <p>Maybe our friend is a harder worker than us and he performs an extra iteration befor giving up. Now he would’ve gotten the fraction</p> \[1 + \frac{1}{1+\frac{1}{1}} = \frac{3}{2}= 1.5\] <p>This is much closer than what we got! And as we saw originally, one more iteration would’ve gotten the result exactly. We can see that performing more and more iterations gives us a fractional expression for a closer and closer number, a result that seems fairly intuitive. These partial results are known as the <strong>convergents</strong> of the continued fraction, and can be used to get fractional approximations of irrational numbers.</p> <p>Let’s get back to our original problem. We have the decimal</p> \[\frac{n_1}{n_2}\approx \frac{p}{s}\approx 1.6391746978162425\] <p>And wish to find a fractional expression that we hope will give us \(p\) and \(s\). We know that continued fractions gives us fractional expressions that are extremely close to a value, so we hope to use that. Our method is as follows: keep taking higher and higher convergents until we get one where the numerator and denominator are \(500\) bit primes.</p> <p>Fortunately for us, sagemath actually has support for continued fractions built in with methods to give us the values for the convergents. Usually I’d say to homeroll as much of your code as you can to gain a better understanding, but in this case the implementation for calculating the convergents is pretty simple and given the time pressure for CTFs there’s no reason not to just use sage’s implementaiton.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">Crypto.Util.number</span> <span class="k">as</span> <span class="n">cun</span>

<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>

<span class="n">n_1</span> <span class="o">=</span> <span class="mi">266809852588733960459210318535250490646048889879697803536547660295087424359820779393976863451605416209176605481092531427192244973818234584061601217275078124718647321303964372896579957241113145579972808278278954608305998030194591242728217565848616966569801983277471847623203839020048073235167290935033271661610383018423844098359553953309688771947405287750041234094613661142637202385185625562764531598181575409886288022595766239130646497218870729009410265665829</span>
<span class="n">n_2</span> <span class="o">=</span> <span class="mi">162770846172885672505993228924251587431051775841565579480252122266243384175644690129464185536426728823192871786769211412433986353757591946187394062238803937937524976383127543836820456373694506989663214797187169128841031021336535634504223477214378608536361140638630991101913240067113567904312920613401666068950970122803021942481265722772361891864873983041773234556100403992691699285653231918785862716655788924038111988473048448673976046224094362806858968008487</span>
<span class="n">c_1</span> <span class="o">=</span> <span class="mi">90243321527163164575722946503445690135626837887766380005026598963525611082629588259043528354383070032618085575636289795060005774441837004810039660583249401985643699988528916121171012387628009911281488352017086413266142218347595202655520785983898726521147649511514605526530453492704620682385035589372309167596680748613367540630010472990992841612002290955856795391675078590923226942740904916328445733366136324856838559878439853270981280663438572276140821766675</span>
<span class="n">c_2</span> <span class="o">=</span> <span class="mi">111865944388540159344684580970835443272640009631057414995719169861041593608923140554694111747472197286678983843168454212069104647887527000991524146682409315180715780457557700493081056739716146976966937495267984697028049475057119331806957301969226229338060723647914756122358633650004303172354762801649731430086958723739208772319851985827240696923727433786288252812973287292760047908273858438900952295134716468135711755633215412069818249559715918812691433192840</span>

<span class="n">c</span> <span class="o">=</span> <span class="nf">continued_fraction</span><span class="p">(</span><span class="nc">Integer</span><span class="p">(</span><span class="n">n_1</span><span class="p">)</span> <span class="o">/</span> <span class="nc">Integer</span><span class="p">(</span><span class="n">n_2</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1024</span><span class="p">):</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nf">numerator</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nf">denominator</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="mi">499</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span> <span class="o">&gt;</span> <span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="mi">499</span><span class="p">)</span> <span class="ow">and</span> <span class="n">cun</span><span class="p">.</span><span class="nf">isPrime</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="ow">and</span> <span class="n">cun</span><span class="p">.</span><span class="nf">isPrime</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">p = </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">s = </span><span class="si">{</span><span class="n">s</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">break</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">I</span><span class="sh">'</span><span class="s">m die</span><span class="sh">"</span><span class="p">)</span>

<span class="n">q</span> <span class="o">=</span> <span class="n">n_1</span> <span class="o">//</span> <span class="n">p</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">q</span> <span class="o">+</span> <span class="mi">2</span>

<span class="n">d_1</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">flag</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">c_1</span><span class="p">,</span> <span class="n">d_1</span><span class="p">,</span> <span class="n">n_1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cun</span><span class="p">.</span><span class="nf">long_to_bytes</span><span class="p">(</span><span class="n">flag</span><span class="p">))</span>
</code></pre></div></div> <p>this gives us the flag <code class="language-plaintext highlighter-rouge">buckeye{I_h0p3_y0u_us3D_c0nt1nu3d_fr4ct10Ns...th4nk5_d0R5A_f0r_th3_1nsp1r4t10n}</code></p> <p>If you’re anything like me, you might still feel a little icky about this solution. Obviously, it worked, but why were $p$ and $s$ exactly returned when we only used an approximation? How close of an approximation do we need to retrieve the actual values? Well, remember that we said the error of \(\frac{n_1}{n_2}\) from \(\frac{p}{s}\) was some number less than \(\frac{1}{2^{1022}}\). Say our continued fraction gave a close value instead, like \(\frac{p+1}{s}=\frac{p}{s} + \frac{1}{s}\). This has an error from our desired value of value \(\frac{1}{s}\) which is upper bounded by \(\frac{1}{2^{499}}\), a value much greater than the error of our approximation. So we can be fairly sure this error won’t occur since \(\frac{n_1}{n_2}\) is much closer than this, and we can find solace in knowing why our method works.</p> <h2 id="alternate-solution">Alternate solution</h2> <p>That was the intended solution, as can be seen by the flag text, but this actually was not the solution I thought of during the CTF. Admittedly, the intended solution is definitely the faster and more simple way to do this, but if you want to have some more fun feel free to keep reading.</p> <p>This solution comes from the fact that $q$ and $r$ are more than twice the amount of bits as $p$ and $s$. Recall the equation</p> \[n_2 = (q+2)\cdots = qs + 2s \approx qs\] <p>We saw that \(qs\) is much larger than \(2s\). In fact, since \(qs\) is the product of a \(1024\) bit number and a \(500\) bit number it would be about \(1524\) bits, and since \(s\) is being doubled then \(2s\) would be \(501\) bits. When you add the two, the bottom \(501\) bits of \(qs\) will combine with \(2s\), and assuming the case we need to carry over a number then the \(502th\) of \(qs\) will be affected as well. But that’s the upper limit, and the remaining \(1022\) bits of \(qs\) are left unaffected, so we can recover this information about \(qs\) from \(n_2\).</p> <p>If you are familiar with coppersmith’s method you may see where this is going. Recovering a number from a series of known bits is fairly common process, and if we can recover \(qs\) then we can take the gcd with \(n_1 = pq\) to recover \(q\) and we’ve essentially solved the problem. Let’s see how we do it.</p> <p>Just knowing the upper \(~1000\) bits of \(qs\) isn’t enough to solve this problem, we aren’t going to magically guess the remaining \(~502\) bits, that number is way to big. Fortunately for us, we have some extra information involving \(qs\). Notice the following relation</p> \[n_1\cdot n_2 = (pq)(rs) = (qs)(pr)\] <p>So we actually have a number that is a multiple of \(qs\) that we can calculate the value of. This may not seem like much, but it’s all we need. To proceed, Let \(u\) represent the top \(1022\) bits of \(qs\) (shifted to their appropriate positions) and let \(x\) represent our guess for the bottom \(502\) bits. Then we can write the following polynomial</p> \[f(x) = u + x\] <p>Let \(r\) represent the correct value of the bottom \(502\) bits. If our guess is correct, then we have</p> \[f(r) = u + r = qs \equiv 0\mod{qs}\] <p>So our problem is basically just looking for a root for \(f(x) \mod{qs}\). This doesn’t seem to help us very much since we don’t know what \(qs\) is, so it would be very helpful if we could get rid of the modulus somehow. Looking at other information we have, we also know that \(qs\) is a divisor of \(n_1\cdot n_2\), so we can generate another polynomial that shares the same root \(r\). This is simply</p> \[g(x) = n_1\cdot n_2\] <p>Pretty straightforward as we have</p> \[g(r) = n_1\cdot n_2 \equiv 0 \mod{qs}\] <p>Another candidate is</p> \[h(x) = x(u+x)\] <p>since</p> \[h(r) = r(u+r) \equiv r\cdot 0 \equiv 0 \mod{qs}\] <p>Notice that since we have that \(f(r), g(r), h(r)\) are all equal to \(0\mod{qs}\), any combination of them will also be equal to \(0\mod{qs}\). (For example: \(g(x) + h(x) + 2f(x)\) will still be \(0\mod{qs}\))</p> <p>How does this help us? Let \(c(x)\) be a linear combination of \(f(x),g(x),h(x)\), then we know that \(c(r) \equiv 0 \mod{qs}\), so \(c(r)\) could be equal to \(0, qs, 2qs, \dots\) etc. But what if we knew that \(|c(r)| &lt; qs\) Then the only possible value that \(c(r)\) could take would be \(0\) and we would know for a fact that \(c(r) = 0\) straight up, no modular math needed. To generate such a combination, we can actually use a lattice algorithm known as LLL. LLL guarantees an upper limit on the size of one of the vectors (which we associate with a polynomial) that it spits out. It turns out that for our case, this vector is small enough to satisfy our constraint of \(|c(r)| &lt; qs\). We first construct our lattice using the three polynomials we found above to get</p> \[\begin{bmatrix} x^2 &amp; u &amp; 0 \\ 0 &amp; x &amp; u \\ 0 &amp; 0 &amp; n_1\cdot n_2 \end{bmatrix}\] <p>This actually won’t work since we don’t know the value of \(x\), so we will replace it with a number that we do know. We know that \(x &lt; 2^{502}\) since it represents the lower \(502\) bits of \(qs\). Let this bound be \(R = 2^{502}\). Then we instead run LLL on the lattice</p> \[\begin{bmatrix} R^2 &amp; uR &amp; 0 \\ 0 &amp; R &amp; u \\ 0 &amp; 0 &amp; n_1\cdot n_2 \end{bmatrix}\] <table> <tbody> <tr> <td>Why will this work instead? Well, let the polynomial that is output instead be \(c(R)\). Since \(r &lt; R\), we should have $$</td> <td>c(r)</td> <td>&lt;</td> <td>c(R)</td> <td>&lt; qs$$.</td> </tr> </tbody> </table> <p>Let the short vector that comes out be \((aR^2, bR, c)\). This vector represents \(c(R)\), so we extract the coefficients then solve \(ax^2 + bx + c = 0\) for \(x\), which gives us our value of \(r\)! From there, we can reconstruct \(qs = u + r\), solve for \(q\) by taking the gcd with \(n_1 = pq\), and eventually solve the problem.</p> <p>If this seems confusing, it may help to look at this solve script.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">Crypto.Util.number</span> <span class="k">as</span> <span class="n">cun</span>

<span class="n">n_1</span> <span class="o">=</span> <span class="mi">266809852588733960459210318535250490646048889879697803536547660295087424359820779393976863451605416209176605481092531427192244973818234584061601217275078124718647321303964372896579957241113145579972808278278954608305998030194591242728217565848616966569801983277471847623203839020048073235167290935033271661610383018423844098359553953309688771947405287750041234094613661142637202385185625562764531598181575409886288022595766239130646497218870729009410265665829</span>
<span class="n">n_2</span> <span class="o">=</span> <span class="mi">162770846172885672505993228924251587431051775841565579480252122266243384175644690129464185536426728823192871786769211412433986353757591946187394062238803937937524976383127543836820456373694506989663214797187169128841031021336535634504223477214378608536361140638630991101913240067113567904312920613401666068950970122803021942481265722772361891864873983041773234556100403992691699285653231918785862716655788924038111988473048448673976046224094362806858968008487</span>
<span class="n">c_1</span> <span class="o">=</span> <span class="mi">90243321527163164575722946503445690135626837887766380005026598963525611082629588259043528354383070032618085575636289795060005774441837004810039660583249401985643699988528916121171012387628009911281488352017086413266142218347595202655520785983898726521147649511514605526530453492704620682385035589372309167596680748613367540630010472990992841612002290955856795391675078590923226942740904916328445733366136324856838559878439853270981280663438572276140821766675</span>
<span class="n">c_2</span> <span class="o">=</span> <span class="mi">111865944388540159344684580970835443272640009631057414995719169861041593608923140554694111747472197286678983843168454212069104647887527000991524146682409315180715780457557700493081056739716146976966937495267984697028049475057119331806957301969226229338060723647914756122358633650004303172354762801649731430086958723739208772319851985827240696923727433786288252812973287292760047908273858438900952295134716468135711755633215412069818249559715918812691433192840</span>
<span class="n">bound</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span><span class="mi">502</span>
<span class="n">upper</span> <span class="o">=</span> <span class="p">(</span><span class="n">n_2</span> <span class="o">&gt;&gt;</span> <span class="mi">502</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">502</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">n_1</span> <span class="o">*</span> <span class="n">n_2</span>
<span class="n">mat</span> <span class="o">=</span> <span class="nf">matrix</span><span class="p">([</span>
    <span class="p">[</span><span class="n">bound</span><span class="o">^</span><span class="mi">2</span><span class="p">,</span> <span class="n">bound</span> <span class="o">*</span> <span class="n">upper</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">bound</span><span class="p">,</span> <span class="n">upper</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">N</span><span class="p">]</span>
<span class="p">])</span>
<span class="c1"># print(mat.LLL())
</span><span class="n">sv</span> <span class="o">=</span> <span class="n">mat</span><span class="p">.</span><span class="nc">LLL</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">sv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">//</span><span class="p">(</span><span class="n">bound</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">sv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">//</span> <span class="n">bound</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">sv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">x</span> <span class="o">=</span> <span class="nf">var</span><span class="p">(</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">)</span>
<span class="n">eq</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">r</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">qs</span> <span class="o">=</span> <span class="n">upper</span>
<span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">mult</span> <span class="ow">in</span> <span class="n">eq</span><span class="p">.</span><span class="nf">roots</span><span class="p">():</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">upper</span> <span class="o">+</span> <span class="n">root</span>
    <span class="k">if</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">n_1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">qs</span> <span class="o">=</span> <span class="n">t</span>

<span class="n">q</span> <span class="o">=</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">n_1</span><span class="p">,</span> <span class="n">qs</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">n_1</span> <span class="o">//</span> <span class="n">q</span>
<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>
<span class="n">d</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="n">p1</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">c_1</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n_1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cun</span><span class="p">.</span><span class="nf">long_to_bytes</span><span class="p">(</span><span class="n">p1</span><span class="p">))</span>

</code></pre></div></div> <p>This uses sage’s implmentation of LLL.</p> <p>Chances are you’re left unsatisfied with the ending of this solution as well. If you have questions like “how do we know that the polynomial produced by LLL is small enough?” or “What is LLL?” then I recommend first reading up on lattices and the LLL algorithm. You’ll find that the first vector in the returned basis has a very convient limit to it’s size. I would also recommend looking into coppersmith’s method, which forms the basis for this method used. Finally, https://eprint.iacr.org/2020/1506.pdf is a good source for using this lattice method to break RSA and is what I referred to during the CTF.</p>]]></content><author><name></name></author><category term="ctf-writeups"/><category term="crypto"/><summary type="html"><![CDATA[Quadprimes, more secure than twinprimes]]></summary></entry><entry><title type="html">Buckeye 2023 Twin Prime</title><link href="https://freed2003.github.io/blog/2023/twinprime/" rel="alternate" type="text/html" title="Buckeye 2023 Twin Prime"/><published>2023-10-03T15:09:00+00:00</published><updated>2023-10-03T15:09:00+00:00</updated><id>https://freed2003.github.io/blog/2023/twinprime</id><content type="html" xml:base="https://freed2003.github.io/blog/2023/twinprime/"><![CDATA[<p>We are presented with the following code.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">Crypto.Util.number</span> <span class="k">as</span> <span class="n">cun</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">cun</span><span class="p">.</span><span class="nf">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">2</span>
    <span class="k">if</span> <span class="n">cun</span><span class="p">.</span><span class="nf">isPrime</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
        <span class="k">break</span>

<span class="n">n</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>

<span class="n">FLAG</span> <span class="o">=</span> <span class="n">cun</span><span class="p">.</span><span class="nf">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">buckeye{?????????????????????????????????????????????????????????????}</span><span class="sh">"</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">FLAG</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="k">assert</span> <span class="nf">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">==</span> <span class="n">FLAG</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">n = </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">c = </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="sh">"""</span><span class="s">
Output:
n = 20533399299284046407152274475522745923283591903629216665466681244661861027880216166964852978814704027358924774069979198482663918558879261797088553574047636844159464121768608175714873124295229878522675023466237857225661926774702979798551750309684476976554834230347142759081215035149669103794924363457550850440361924025082209825719098354441551136155027595133340008342692528728873735431246211817473149248612211855694673577982306745037500773163685214470693140137016315200758901157509673924502424670615994172505880392905070519517106559166983348001234935249845356370668287645995124995860261320985775368962065090997084944099
c = 786123694350217613420313407294137121273953981175658824882888687283151735932871244753555819887540529041840742886520261787648142436608167319514110333719357956484673762064620994173170215240263058130922197851796707601800496856305685009993213962693756446220993902080712028435244942470308340720456376316275003977039668016451819131782632341820581015325003092492069871323355309000284063294110529153447327709512977864276348652515295180247259350909773087471373364843420431252702944732151752621175150127680750965262717903714333291284769504539327086686569274889570781333862369765692348049615663405291481875379224057249719713021
</span><span class="sh">"""</span>

</code></pre></div></div> <p>as we may have expected from reading the problem, the code is performing RSA with a pair of twin primes making up the modulus \(n\).</p> <p>When generating primes for RSA it is important to make sure that the two primes have no known relation to eachother. If they do, it opens the door to easier methods of factoring the modulus. Seeing as the two primes here are closely related (off by two), we can look for a way to solve for \(p\) or \(q\).</p> <p>We start by expressing \(n\), which we know, in terms of \(p\).</p> \[n = p \cdot q = p \cdot (p + 2) = p^2 + 2p\] \[\implies p^2 + 2p - n = 0\] <p>We could use the quadratic formula here and we’d be done.</p> <p>However, there is another, slightly easier, way that we could’ve used to attain \(p\). By now, you likely might have guessed that</p> \[\lfloor \sqrt{n} \rfloor = p\] <p>You can take this change to convice yourself this is true, or see the proof here.</p> \[p^2 &lt; p\cdot (p+2) = n = (p+1)^2 - 1 &lt; (p+1)^2\] <p>Thus, the integer square root of \(n\) will also yield us \(p\), which can be found just by using the python function “isqrt()”, which can be found in the math module.</p> <p>Let’s look at one more factorization method. You may have noticed the equality:</p> \[p \cdot (p+2) = (p+1)^2 - 1\] <p>which follows directly from your favorite middle school factoring trick.</p> \[p \cdot (p+2) = (p+1 -1)(p+1+1) = (p+1)^2 - 1 = n\] <p>which shows us we could also recover $n$ by the following equation</p> \[p = \sqrt{n+1} - 1\] <p>This is actually a simple example of a nice <a href="https://en.wikipedia.org/wiki/Fermat%27s_factorization_method">factoring trick</a> brought to us by our friend Fermat.</p> <p>Which we can implement as</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">math</span> <span class="kn">import</span> <span class="n">isqrt</span>
<span class="kn">import</span> <span class="n">Crypto.Util.number</span> <span class="k">as</span> <span class="n">cun</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">20533399299284046407152274475522745923283591903629216665466681244661861027880216166964852978814704027358924774069979198482663918558879261797088553574047636844159464121768608175714873124295229878522675023466237857225661926774702979798551750309684476976554834230347142759081215035149669103794924363457550850440361924025082209825719098354441551136155027595133340008342692528728873735431246211817473149248612211855694673577982306745037500773163685214470693140137016315200758901157509673924502424670615994172505880392905070519517106559166983348001234935249845356370668287645995124995860261320985775368962065090997084944099</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">786123694350217613420313407294137121273953981175658824882888687283151735932871244753555819887540529041840742886520261787648142436608167319514110333719357956484673762064620994173170215240263058130922197851796707601800496856305685009993213962693756446220993902080712028435244942470308340720456376316275003977039668016451819131782632341820581015325003092492069871323355309000284063294110529153447327709512977864276348652515295180247259350909773087471373364843420431252702944732151752621175150127680750965262717903714333291284769504539327086686569274889570781333862369765692348049615663405291481875379224057249719713021</span>

<span class="n">p</span> <span class="o">=</span> <span class="nf">isqrt</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

<span class="n">d</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="mi">65537</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>

<span class="n">pt</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">cun</span><span class="p">.</span><span class="nf">long_to_bytes</span><span class="p">(</span><span class="n">pt</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
</code></pre></div></div> <p>Which gives us the flag <code class="language-plaintext highlighter-rouge">buckeye{B3_TH3R3_OR_B3_SQU4R3__abcdefghijklmonpqrstuvwxyz__0123456789}</code> A misconception many people have that may be further brought upon by this problem is that this RSA vulnerability relies on how close the two primes are to eachother. This is false, the vulnerability primarily comes from the fact that the relation between the two primes was exposed to us. Note the following example where $p$ and $q$ are spaced by a much larger number</p> <p>If we let \(q = p + 2^{32}\), then we have</p> \[n = p \cdot (p+2^{32}) =(p + 2^{31} - 2^{31})(p+2^{31}+2^{31}) = (p + 2^{31})^2 - 2^{62}\] <p>We can then recover \(p\) using a similar method as our original problem.</p> <p>Hopefully this example shows that Fermat’s method works no matter how far apart the primes are. It is always better just not to use related primes.</p>]]></content><author><name></name></author><category term="ctf-writeups"/><category term="crypto"/><summary type="html"><![CDATA[You know what's not one of a kind? A twin!]]></summary></entry><entry><title type="html">SquareCTF 2023 enCRCroach</title><link href="https://freed2003.github.io/blog/2023/enCRCroach/" rel="alternate" type="text/html" title="SquareCTF 2023 enCRCroach"/><published>2023-10-03T15:09:00+00:00</published><updated>2023-10-03T15:09:00+00:00</updated><id>https://freed2003.github.io/blog/2023/enCRCroach</id><content type="html" xml:base="https://freed2003.github.io/blog/2023/enCRCroach/"><![CDATA[<p>We’re given the source code to a server where we are supposed to impersonate admin. Validation is done by a token that is encrypted with AES-CTR. Basically, the server decrypts the token and checks the name of the user and if it’s admin then they spit out the flag. here’s the code.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">hashlib</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">secrets</span>

<span class="kn">import</span> <span class="n">fastcrc</span>
<span class="kn">import</span> <span class="n">werkzeug.security</span>
<span class="kn">from</span> <span class="n">cryptography.hazmat.primitives.ciphers</span> <span class="kn">import</span> <span class="n">Cipher</span><span class="p">,</span> <span class="n">algorithms</span><span class="p">,</span> <span class="n">modes</span>
<span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">Response</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">send_from_directory</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="n">SERVER_KEY</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">SERVER_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
<span class="n">IV_LEN</span> <span class="o">=</span> <span class="mi">16</span>
<span class="c1"># USER_LEN = can potentially vary
</span><span class="n">NONCE_LEN</span> <span class="o">=</span> <span class="mi">42</span>
<span class="n">MAC_LEN</span> <span class="o">=</span> <span class="mi">8</span>
<span class="n">KEY_LEN</span> <span class="o">=</span> <span class="mi">32</span>

<span class="n">USER_DB</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1"># Someone keeps hacking us and reading out the admin's /flag.txt.
</span>    <span class="c1"># Disabling this account to see if that helps.
</span>    <span class="c1"># "admin": "7a2f445babffa758471e3341a1fadce9abeff194aded071e4fd48b25add856a7",
</span>
    <span class="c1"># Other accounts. File a ticket similar to QDB-244321 to add or modify passwords.
</span>    <span class="sh">"</span><span class="s">azure</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">9631758175d2f048db1964727ad2efef4233099b97f383e4f1e121c900f3e722</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">cthon</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">980809b1482352ae59be5d3ede484c0835b46985309a04ac1bad70b22a167670</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>


<span class="k">def</span> <span class="nf">response</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">):</span>
    <span class="k">return</span> <span class="nc">Response</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="p">,</span> <span class="n">mimetype</span><span class="o">=</span><span class="sh">"</span><span class="s">text/plain</span><span class="sh">"</span><span class="p">)</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">GET</span><span class="sh">"</span><span class="p">,</span> <span class="p">])</span>
<span class="k">def</span> <span class="nf">root</span><span class="p">():</span>
    <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">"""</span><span class="s">Endpoints:
  - /auth?user=&lt;user&gt;: Auth a user with an optional password. Returns an auth token.
  - /read/&lt;path&gt;?token=&lt;token&gt;: Read out a file from a user</span><span class="sh">'</span><span class="s">s directory. Token required.
</span><span class="sh">"""</span><span class="p">)</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="sh">"</span><span class="s">/auth</span><span class="sh">"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">GET</span><span class="sh">"</span><span class="p">,</span> <span class="p">])</span>
<span class="k">def</span> <span class="nf">auth</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Return a token once the user is successfully authenticated.
    </span><span class="sh">"""</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">user</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">USER_DB</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">"</span><span class="s">Bad or missing </span><span class="sh">'</span><span class="s">user</span><span class="sh">'"</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>

    <span class="n">password_hash</span> <span class="o">=</span> <span class="n">USER_DB</span><span class="p">[</span><span class="n">user</span><span class="p">]</span>
    <span class="n">given</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">pbkdf2_hmac</span><span class="p">(</span><span class="sh">"</span><span class="s">SHA256</span><span class="sh">"</span><span class="p">,</span> <span class="n">password</span><span class="p">.</span><span class="nf">encode</span><span class="p">(),</span> <span class="n">user</span><span class="p">.</span><span class="nf">encode</span><span class="p">(),</span> <span class="mi">1000</span><span class="p">).</span><span class="nf">hex</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">password_hash</span> <span class="o">!=</span> <span class="n">given</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">"</span><span class="s">Bad </span><span class="sh">'</span><span class="s">password</span><span class="sh">'"</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>

    <span class="c1"># User is authenticated! Return a super strong token.
</span>    <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="nf">encrypt_token</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">SERVER_KEY</span><span class="p">).</span><span class="nf">hex</span><span class="p">())</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="sh">"</span><span class="s">/read</span><span class="sh">"</span><span class="p">,</span> <span class="n">defaults</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="sh">"</span><span class="s">/read/&lt;path&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">GET</span><span class="sh">"</span><span class="p">,</span> <span class="p">])</span>
<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Read a static file under the user</span><span class="sh">'</span><span class="s">s directory.

    Lists contents if no path is provided.

    Decrypts the token to auth the request and get the user</span><span class="sh">'</span><span class="s">s name.
    </span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">user</span> <span class="o">=</span> <span class="nf">decrypt_token</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">token</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span> <span class="n">SERVER_KEY</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
        <span class="n">user</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">"</span><span class="s">Bad or missing token</span><span class="sh">"</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>

    <span class="n">user_dir</span> <span class="o">=</span> <span class="n">werkzeug</span><span class="p">.</span><span class="n">security</span><span class="p">.</span><span class="nf">safe_join</span><span class="p">(</span><span class="sh">"</span><span class="s">users</span><span class="sh">"</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">path</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">listing</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">sorted</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">root_path</span><span class="p">,</span> <span class="n">user_dir</span><span class="p">))))</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="n">listing</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">send_from_directory</span><span class="p">(</span><span class="n">user_dir</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">encrypt_token</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Encrypt the user string using </span><span class="sh">"</span><span class="s">authenticated encryption</span><span class="sh">"</span><span class="s">.

    JWTs and JWEs scare me. Too many CVEs! I think I can do better...

    Here</span><span class="sh">'</span><span class="s">s the token format we use to encrypt and authenticate a user</span><span class="sh">'</span><span class="s">s name.
    This is sent to/from the server in ascii-hex:
      len :  16    variable      42      8
      data:  IV ||   USER   || NONCE || MAC
                  </span><span class="sh">'</span><span class="s">------------------------</span><span class="sh">'</span><span class="s"> Encrypted
    </span><span class="sh">"""</span>
    <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="n">KEY_LEN</span>

    <span class="n">user_bytes</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">iv</span> <span class="o">=</span> <span class="n">secrets</span><span class="p">.</span><span class="nf">token_bytes</span><span class="p">(</span><span class="n">IV_LEN</span><span class="p">)</span>
    <span class="n">nonce</span> <span class="o">=</span> <span class="n">secrets</span><span class="p">.</span><span class="nf">token_bytes</span><span class="p">(</span><span class="n">NONCE_LEN</span><span class="p">)</span>

    <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="p">(</span><span class="n">algorithms</span><span class="p">.</span><span class="nc">AES</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">modes</span><span class="p">.</span><span class="nc">CTR</span><span class="p">(</span><span class="n">iv</span><span class="p">)).</span><span class="nf">encryptor</span><span class="p">()</span>

    <span class="n">mac</span> <span class="o">=</span> <span class="nf">gen_mac</span><span class="p">(</span><span class="n">iv</span> <span class="o">+</span> <span class="n">user_bytes</span> <span class="o">+</span> <span class="n">nonce</span><span class="p">)</span>

    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">user_bytes</span> <span class="o">+</span> <span class="n">nonce</span> <span class="o">+</span> <span class="n">mac</span><span class="p">)</span> <span class="o">+</span> <span class="n">cipher</span><span class="p">.</span><span class="nf">finalize</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">iv</span> <span class="o">+</span> <span class="n">ciphertext</span>


<span class="k">def</span> <span class="nf">decrypt_token</span><span class="p">(</span><span class="n">token</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
    <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="n">KEY_LEN</span>

    <span class="n">iv</span><span class="p">,</span> <span class="n">ciphertext</span> <span class="o">=</span> <span class="nf">splitup</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">IV_LEN</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">iv</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">ciphertext</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="n">cipher</span> <span class="o">=</span> <span class="nc">Cipher</span><span class="p">(</span><span class="n">algorithms</span><span class="p">.</span><span class="nc">AES</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">modes</span><span class="p">.</span><span class="nc">CTR</span><span class="p">(</span><span class="n">iv</span><span class="p">)).</span><span class="nf">decryptor</span><span class="p">()</span>
    <span class="n">plaintext</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span> <span class="o">+</span> <span class="n">cipher</span><span class="p">.</span><span class="nf">finalize</span><span class="p">()</span>

    <span class="n">user_bytes</span><span class="p">,</span> <span class="n">nonce</span><span class="p">,</span> <span class="n">mac</span> <span class="o">=</span> <span class="nf">splitup</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="o">-</span><span class="p">(</span><span class="n">NONCE_LEN</span> <span class="o">+</span> <span class="n">MAC_LEN</span><span class="p">),</span> <span class="o">-</span><span class="n">MAC_LEN</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user_bytes</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">nonce</span><span class="p">)</span> <span class="o">!=</span> <span class="n">NONCE_LEN</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">mac</span><span class="p">)</span> <span class="o">!=</span> <span class="n">MAC_LEN</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="n">computed</span> <span class="o">=</span> <span class="nf">gen_mac</span><span class="p">(</span><span class="n">iv</span> <span class="o">+</span> <span class="n">user_bytes</span> <span class="o">+</span> <span class="n">nonce</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">computed</span> <span class="o">!=</span> <span class="n">mac</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">return</span> <span class="n">user_bytes</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">gen_mac</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="c1"># A 64-bit CRC should be pretty good. Faster than a hash, and can't be brute forced.
</span>    <span class="n">crc</span> <span class="o">=</span> <span class="n">fastcrc</span><span class="p">.</span><span class="n">crc64</span><span class="p">.</span><span class="nf">go_iso</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">(</span><span class="n">crc</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="n">MAC_LEN</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="sh">"</span><span class="s">big</span><span class="sh">"</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">splitup</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="o">*</span><span class="n">indices</span><span class="p">):</span>
    <span class="n">last_index</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="n">indices</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">data</span><span class="p">[</span><span class="n">last_index</span><span class="p">:</span><span class="n">index</span><span class="p">]</span>
        <span class="n">last_index</span> <span class="o">=</span> <span class="n">index</span>
    <span class="k">yield</span> <span class="n">data</span><span class="p">[</span><span class="n">last_index</span><span class="p">:]</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">"</span><span class="s">0.0.0.0</span><span class="sh">"</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">FLASK_SERVER_PORT</span><span class="sh">"</span><span class="p">),</span> <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p>Ok that’s a lot. The first main thing to look at is the encrypt and decrypt token functions. They do what they say, basically they encrypt a token of the user’s name and add the information needed to decrypt it (other than the key of course). They also add a mac to try to defend against attacks that modify the cipher text, but the mac is using CRC and we’ll later see that CRC doesn’t make for a good mac.</p> <p>So if you don’t know what CTR mode does, it basically encrypts some value with AES and then XORs the resulting value with your plaintext to produce the cipher text. It’s basically turning AES into a stream cipher. Here’s a picture to help better understand it</p> <p><img src="https://hackmd.io/_uploads/r1h4O1hB6.png" alt="image"/></p> <p>Decryption is very similar. You take the nonce and increment it and xor the result with the ciphertext to get the plaintext, since xoring something with itself yields \(0\). If you don’t see it already, this is actually very susceptible to a known plaintext attack where if we know the plaintext then we can modify the ciphertext to decrypt whatever we want even if we don’t know the key. To see this, consider an arbitrary byte in the plaintext. It encrypts to the form</p> \[ct_i = pt_i \oplus enc_k(nonce + ctr)_i\] <p>And the decryption works as following</p> \[ct_i \oplus enc_k(nonce + ctr)_i = pt_i \oplus enc_k(nonce + ctr)_i \oplus enc_k(nonce + ctr)_i = pt_i\] <p>where \(i\) denote’s it’s index in the block. If we know the value of \(pt_i\) then we can xor the ciphertext byte with \(pt_i \oplus a\) for any value of \(a\). Decrypting this new value gives us</p> \[ct_i\oplus pt_i \oplus a \oplus enc_k(nonce + ctr)_i = pt_i pt_i \oplus a \oplus enc_k(nonce + ctr)_i \oplus enc_k(nonce + ctr)_i = a\] <p>and we have successfully modified our ciphertext to produce an arbitrary byte \(a\) upon decryption.</p> <p>Why is this useful for our challenge? Well, they disabled the ability to get a token with user “admin” but we can still get a token with the user “cthon” or “azure”. Even though the user name gets encrypted, we are given the position in the ciphertext so we can use our attack to change it to read “admin” instead. Should be simple enough.</p> <p>So now all we need is to get a token. This requires logging into the one of the enabled accounts. The information for these accounts is located in the code here</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">USER_DB</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1"># Someone keeps hacking us and reading out the admin's /flag.txt.
</span>    <span class="c1"># Disabling this account to see if that helps.
</span>    <span class="c1"># "admin": "7a2f445babffa758471e3341a1fadce9abeff194aded071e4fd48b25add856a7",
</span>
    <span class="c1"># Other accounts. File a ticket similar to QDB-244321 to add or modify passwords.
</span>    <span class="sh">"</span><span class="s">azure</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">9631758175d2f048db1964727ad2efef4233099b97f383e4f1e121c900f3e722</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">cthon</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">980809b1482352ae59be5d3ede484c0835b46985309a04ac1bad70b22a167670</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div> <p>The value for each key is the hash of the password, so we can’t actually get the password directly from here. We can see the process in the code here.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">password_hash</span> <span class="o">=</span> <span class="n">USER_DB</span><span class="p">[</span><span class="n">user</span><span class="p">]</span>
    <span class="n">given</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">pbkdf2_hmac</span><span class="p">(</span><span class="sh">"</span><span class="s">SHA256</span><span class="sh">"</span><span class="p">,</span> <span class="n">password</span><span class="p">.</span><span class="nf">encode</span><span class="p">(),</span> <span class="n">user</span><span class="p">.</span><span class="nf">encode</span><span class="p">(),</span> <span class="mi">1000</span><span class="p">).</span><span class="nf">hex</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">password_hash</span> <span class="o">!=</span> <span class="n">given</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">"</span><span class="s">Bad </span><span class="sh">'</span><span class="s">password</span><span class="sh">'"</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>
</code></pre></div></div> <p>So it’s hashing the password with pbkdf2_hmac sha256 with the salt of the user and 1000 rounds. Running hashcat with rockyou.txt will tell us the password is “<strong>**</strong>”, which is a funny password. I’m going to leave the exact details of running hashcat out of here since it’s not important, but basically you can give hashcat a dictionary, a target and the hashing method and it will bash it out for you.</p> <p>Ok, so now we input it into the website and get a token. We can use our known plaintext attack to retrieve a new token the decrypts to user “admin” and submit that. Except we forgot one thing, the CRC check on the ciphertext to check for modifications. The thing is, CRC isn’t really secure since it follows the following linear property.</p> \[CRC(a) \oplus CRC(b) \oplus CRC(c) = CRC(a\oplus b\oplus c)\] <p>for messages \(a,b,c\) that have equal length to eachother. (I won’t prove this here but I’m sure you can find something online). Ok, so using this we can calculate our new CRC. How exactly do we do this? So first let \(a\) be our original unmodified token. Remember that we modified it by xoring by another value, so that value can be \(b\). But wait! \(b\) was only of length \(5\) since we were just changing “cthon” to “admin” right? That’s much shorter than the length of \(a\). It is, so what we do is pad out the rest of the bytes that are unmodified with null bytes since xoring by a nullbyte gives the same value back. Finally, we set \(c\) equal to all nullbytes with equal length with \(a\) and \(b\). \(a\oplus b\oplus c\) is now equal to what we want, so we can find the new CRC.</p> <p>We submit this to the server, which gives us the flag. Here’s the solve script to get the new token</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">hashlib</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">secrets</span>

<span class="kn">import</span> <span class="n">fastcrc</span>
<span class="kn">import</span> <span class="n">werkzeug.security</span>
<span class="kn">from</span> <span class="n">cryptography.hazmat.primitives.ciphers</span> <span class="kn">import</span> <span class="n">Cipher</span><span class="p">,</span> <span class="n">algorithms</span><span class="p">,</span> <span class="n">modes</span>
<span class="n">IV_LEN</span> <span class="o">=</span> <span class="mi">16</span>
<span class="n">ct</span> <span class="o">=</span> <span class="sh">"</span><span class="s">eb5ce85fc4b88e8e993170343a602e67d9b928b33d82346584ab3a504f8bf58d59687fcb46ded50c5af5fc55a7d6f5a38cfd07f0fcb040ccb2574ca59a05cc1aef938aa84ff6d0</span><span class="sh">"</span>
<span class="n">MAC_LEN</span> <span class="o">=</span> <span class="mi">8</span>
<span class="k">def</span> <span class="nf">gen_mac</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="c1"># A 64-bit CRC should be pretty good. Faster than a hash, and can't be brute forced.
</span>    <span class="n">crc</span> <span class="o">=</span> <span class="n">fastcrc</span><span class="p">.</span><span class="n">crc64</span><span class="p">.</span><span class="nf">go_iso</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">(</span><span class="n">crc</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="n">MAC_LEN</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="sh">"</span><span class="s">big</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ct</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
<span class="n">iv</span> <span class="o">=</span> <span class="n">ct</span><span class="p">[:</span><span class="mi">16</span><span class="p">]</span>
<span class="n">mac</span> <span class="o">=</span> <span class="n">ct</span><span class="p">[</span><span class="o">-</span><span class="mi">8</span><span class="p">:]</span>
<span class="n">nonce</span> <span class="o">=</span> <span class="n">ct</span><span class="p">[</span><span class="o">-</span><span class="mi">50</span><span class="p">:</span><span class="o">-</span><span class="mi">8</span><span class="p">]</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">(</span><span class="n">ct</span><span class="p">[</span><span class="mi">16</span><span class="p">:</span><span class="o">-</span><span class="mi">50</span><span class="p">])</span>
<span class="n">target</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">admin</span><span class="sh">"</span>
<span class="n">k</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">cthon</span><span class="sh">"</span>
<span class="n">yea</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">yea</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">target</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="n">pt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">k</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">target</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">aa</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">yea</span><span class="p">)</span>

<span class="n">token</span> <span class="o">=</span> <span class="n">iv</span> <span class="o">+</span> <span class="n">pt</span> <span class="o">+</span> <span class="n">nonce</span>
<span class="n">org</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="se">\x00</span><span class="sh">"</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="sa">b</span><span class="sh">"</span><span class="s">cthon</span><span class="sh">"</span> <span class="o">+</span> <span class="sa">b</span><span class="sh">"</span><span class="se">\x00</span><span class="sh">"</span> <span class="o">*</span><span class="mi">42</span>
<span class="n">dd</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="se">\x00</span><span class="sh">"</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="n">aa</span> <span class="o">+</span> <span class="sa">b</span><span class="sh">"</span><span class="se">\x00</span><span class="sh">"</span><span class="o">*</span><span class="mi">42</span>
<span class="n">mac3</span> <span class="o">=</span> <span class="nf">gen_mac</span><span class="p">(</span><span class="nf">bytes</span><span class="p">(</span><span class="mi">63</span><span class="p">))</span>
<span class="n">mac2</span> <span class="o">=</span> <span class="nf">gen_mac</span><span class="p">(</span><span class="n">dd</span><span class="p">)</span>
<span class="n">newmac</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">i</span> <span class="o">^</span> <span class="n">j</span> <span class="o">^</span> <span class="n">k</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">mac</span><span class="p">,</span><span class="n">mac2</span><span class="p">,</span><span class="n">mac3</span><span class="p">)])</span>

<span class="n">final</span> <span class="o">=</span> <span class="n">token</span> <span class="o">+</span> <span class="n">newmac</span>
<span class="nf">print</span><span class="p">(</span><span class="n">final</span><span class="p">.</span><span class="nf">hex</span><span class="p">())</span>
</code></pre></div></div> <p>where the initial variable \(ct\) is the token we are modifying.</p>]]></content><author><name></name></author><category term="ctf-writeups"/><category term="crypto"/><summary type="html"><![CDATA[Why webdevelopers should learn cryptorgraphy]]></summary></entry></feed>